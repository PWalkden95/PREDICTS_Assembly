print("hello world")
conda deactivate
print("hello world")
require(tidyverse)
rm(list = ls())
PREDICTS_tpds <- readRDS("Outputs/PREDICTS_sites_tpds.rds")
PREDICTS <- readRDS("Outputs/refined_predicts.rds") %>% dplyr::distinct(SSBS, Predominant_habitat, Use_intensity, Biome, UN_subregion, Realm) %>%
dplyr::mutate(Predominant_habitat = ifelse(grepl(Predominant_habitat, pattern = "secondary", ignore.case = TRUE), "Secondary vegetation",
paste(Predominant_habitat)))
TPD_LU <- data.frame(SSBS = names(PREDICTS_tpds)) %>% dplyr::left_join(PREDICTS)
source("Functions/TPD_3D_plots.R")
land_use <- PREDICTS %>% dplyr::distinct(Predominant_habitat, .keep_all = FALSE) %>% dplyr::filter(Predominant_habitat != "Cannot decide") %>%
pull() %>% as.character()
table(TPD_LU$Predominant_habitat, TPD_LU$UN_subregion)
table(TPD_LU$Predominant_habitat, TPD_LU$Biome)
table(TPD_LU$Predominant_habitat, TPD_LU$Realm)
primary_for <- TPD_LU %>% dplyr::filter(Predominant_habitat == land_use[5]) %>% pull(SSBS) %>% as.character()
primary_non_for <- TPD_LU %>% dplyr::filter(Predominant_habitat == land_use[6]) %>% pull(SSBS) %>% as.character()
secondary <- TPD_LU %>% dplyr::filter(Predominant_habitat == land_use[2]) %>% pull(SSBS) %>% as.character()
TPD_3d_plot(PREDICTS_tpds, sites = primary_for,  T1lab = "Locomotion", T2lab = "Foraging",T3lab = "Body", method = "prob")
TPD_3d_plot(PREDICTS_tpds, sites = primary_for,  T1lab = "Locomotion", T2lab = "Foraging",T3lab = "Body", method = "percentile")
TPD_Diff_plot(data = PREDICTS_tpds, sites1 = primary_for, sites2 = primary_non_for, T1lab = "Locomotion", T2lab = "Foraging",T3lab = "Body",
method = "percentile")
TPD_Diff_plot(data = PREDICTS_tpds, sites1 = primary_for, sites2 = primary_non_for, T1lab = "Locomotion", T2lab = "Foraging",T3lab = "Body",
method = "prob")
primary_for <- TPD_LU %>% dplyr::filter(Predominant_habitat == land_use[5], Realm == "Afrotropic") %>% pull(SSBS) %>% as.character()
plantation <- TPD_LU %>% dplyr::filter(Predominant_habitat == land_use[1], Realm == "Afrotropic" ) %>% pull(SSBS) %>% as.character()
TPD_Diff_plot(data = PREDICTS_tpds, sites1 = primary_for, sites2 = plantation, T1lab = "Locomotion", T2lab = "Foraging",T3lab = "Body",
method = "percentile")
TPD_Diff_plot(data = PREDICTS_tpds, sites1 = primary_for, sites2 = plantation, T1lab = "Locomotion", T2lab = "Foraging",T3lab = "Body",
method = "prob")
data <- PREDICTS_tpds
sites1 <- primary
sites2 <- secondary
method <- "prob"
sites_lu <- data.frame(SSBS= names(PREDICTS_tpds)) %>% dplyr::left_join(PREDICTS[,c("SSBS","Predominant_habitat","Use_intensity")])
primary <- sites_lu %>% dplyr::filter(grepl(Predominant_habitat, pattern = "Primary")) %>% pull(SSBS)
sites1_data <- TPD_plot_data(data,sites1)
#
# TPD_3d_plot(sites = sites_lu$SSBS,data = PREDICTS_tpds, T1lab = "Locomotion", T2lab = "Foraging",T3lab = "Body")
#
# #####################################################
# #####################################################
# ## SD plot showing the difference between two set of sites
#
# secondary <- sites_lu %>% dplyr::filter(grepl(Predominant_habitat, pattern = "secondary",ignore.case = TRUE)) %>% pull(SSBS)
#
# data <- PREDICTS_tpds
sites1 <- primary
sites1_data <- TPD_plot_data(data,sites1)
sites2_data <- TPD_plot_data(data,sites2)
filled_cells_1 <- sites1_data[["pl_dat"]] %>% dplyr::group_by(T2,T1,T3) %>%
dplyr::mutate(prob = ifelse(prob == 0,NA,prob)) %>% filter(!is.na(prob)) %>% data.frame()
filled_cells_1 <- percentile_cells(filled_cells_1)
filled_cells_2 <- sites2_data[["pl_dat"]] %>% dplyr::group_by(T2,T1,T3) %>% dplyr::summarise(prob = mean(prob, na.rm = TRUE)) %>%
dplyr::mutate(prob = ifelse(prob == 0,NA,prob)) %>% filter(!is.na(prob)) %>% data.frame()
filled_cells_2 <- percentile_cells(filled_cells_2) %>% dplyr::rename(prob_2 = prob, percentile_2 = percentile)
if(method == "prob"){
filled_cells_1 <- filled_cells_1 %>% dplyr::rename(value = prob)
filled_cells_2 <- filled_cells_2 %>% dplyr::rename(value_2 = prob_2)
my.colors_high <-colorRampPalette(c("blue", "steelblue4", "steelblue1", "lightskyblue1"))
my.colors_low <-colorRampPalette(c("tomato", "orangered", "orangered4", "red"))
my_colour_2p <- colorRampPalette(c("blue","steelblue1","lightskyblue1"))
my_colour_2n <- colorRampPalette(c("yellow","orange","red"))
} else {
filled_cells_1 <- filled_cells_1 %>% dplyr::rename(value = percentile)
filled_cells_2 <- filled_cells_2 %>% dplyr::rename(value_2 = percentile_2)
my.colors_high <-colorRampPalette(c("lightskyblue1", "steelblue1", "steelblue4", "blue"))
my.colors_low <-colorRampPalette(c("red", "orangered4", "orangered", "tomato"))
my_colour_2p <- colorRampPalette(c("lightskyblue1","steelblue1","blue"))
my_colour_2n <- colorRampPalette(c("red","orange","yellow"))
}
diff_cells <- filled_cells_1 %>% dplyr::left_join(filled_cells_2, by = c("T1","T2","T3")) %>% data.frame()
cells_frame <- filled_cells_2 %>% dplyr::left_join(filled_cells_1, by = c("T1","T2","T3")) %>% dplyr::filter(is.na(value)) %>%
dplyr::relocate(value, .before = value_2) %>% rbind(diff_cells) %>% dplyr::mutate(lost_cell = ifelse(is.na(value_2),TRUE,FALSE),
gain_cell = ifelse(is.na(value),TRUE,FALSE),
value = ifelse(is.na(value), 0, value),
value_2 = ifelse(is.na(value_2), 0, value_2),
diff = value_2 - value)
## identify cells which have a negative diff
if(method == "prob"){
pos_cells <- cells_frame %>% dplyr::filter(diff > 0, !gain_cell, !lost_cell) %>% pull(diff)
} else {
pos_cells <- cells_frame %>% dplyr::filter(diff < 0, !gain_cell, !lost_cell) %>% pull(diff)
}
color.df_high<-data.frame(diff=pos_cells[order(pos_cells)], color.name=my.colors_high(length(pos_cells))) %>% distinct(diff,.keep_all = TRUE)#generates 2001 colors from the color ramp
## identify cells which have a positive diff(lose occupancy)
if(method == "prob"){
neg_cells <- cells_frame %>% dplyr::filter(diff < 0, !gain_cell, !lost_cell) %>% pull(diff)
} else {
neg_cells <- cells_frame %>% dplyr::filter(diff > 0, !gain_cell, !lost_cell) %>% pull(diff)
}
color.df_low<-data.frame(diff=neg_cells[order(neg_cells)], color.name=my.colors_low(length(neg_cells))) %>% distinct(diff,.keep_all = TRUE)#generates 2001 colors from the color ramp
color.df <- rbind(color.df_high,color.df_low)
filled_cells_col <- cells_frame %>% dplyr::left_join(color.df, by = "diff") %>%
dplyr::mutate(color.name = ifelse(is.na(color.name), "#FFFFFF",color.name))
filled_cells_col <- filled_cells_col %>% dplyr::mutate(color.name = ifelse(gain_cell,"#CCFF99",paste(color.name)))
filled_cells_col <- filled_cells_col %>% dplyr::mutate(color.name = ifelse(lost_cell,"#000000",paste(color.name)))
x <- filled_cells_col$T2
y <- filled_cells_col$T1
z <- filled_cells_col$T3
View(cells_frame)
test <- cells_frame %>% dplyr::filter(lost_cell)
View(test)
species_TPD <- read_rds("Outputs/species_tpds_morpho.rds")
View(species_TPD)
cells <- test
species_cells_frame <- data.frame(cells[,c(1:3)],potential_species = NA)
View(species_cells_frame)
x <- cells_frame[,1]
y <- cells_frame[,2]
x <- cells_frame[,3]
i <- 1
j <- 1
x <- cells[i,1]
y <- cells[i,2]
x <- cells[i,3]
x <- cells[i,1]
y <- cells[i,2]
z <- cells[i,3]
sp_dat <- species_TPD[[j]]
View(sp_dat)
sp_dat <- species_TPD[[j]] %>% dplyr::filter(locomotion == x, foraging == y, body == z)
for(j in 1:length(species_TPD)){
sp_dat <- species_TPD[[j]] %>% dplyr::filter(locomotion == x, foraging == y, body == z)
if(nrow(sp_dat) > 0) {
species_cells_frame[i,4] <- paste(species_cells_frame,names(species_TPD)[j])
}
}
View(species_cells_frame)
View(species_TPD)
names(species_cells_frame)[2]
names(species_TPD)[2]
paste(NA,names(species_TPD)[2])
x <- cells[i,1]
y <- cells[i,2]
z <- cells[i,3]
species_cells_frame[i,4] <- paste(species_cells_frame,names(species_TPD)[j])
species_cells_frame[i,4] <- paste(species_cells_frame[i,4],names(species_TPD)[j])
View(species_cells_frame)
species_fit <- function(cells){
species_cells_frame <- data.frame(cells[,c(1:3)],potential_species = NA)
for(i in 1:nrow(species_cells_frame)){
x <- cells[i,1]
y <- cells[i,2]
z <- cells[i,3]
for(j in 1:length(species_TPD)){
sp_dat <- species_TPD[[j]] %>% dplyr::filter(locomotion == x, foraging == y, body == z)
if(nrow(sp_dat) > 0) {
species_cells_frame[i,4] <- paste(species_cells_frame[i,4],names(species_TPD)[j])
}
}
}
return(species_cells_frame)
}
hehe <- species_fit(test)
species_cells_frame <- data.frame(cells[,c(1:3)],potential_species = NA)
for(i in 1:nrow(species_cells_frame)){
print(i)
x <- cells[i,1]
y <- cells[i,2]
z <- cells[i,3]
for(j in 1:length(species_TPD)){
sp_dat <- species_TPD[[j]] %>% dplyr::filter(locomotion == x, foraging == y, body == z)
if(nrow(sp_dat) > 0) {
species_cells_frame[i,4] <- paste(species_cells_frame[i,4],names(species_TPD)[j])
}
}
}
View(species_cells_frame)
x %in% sites1_data$pl_dat$T1
x %in% sites1_data$pl_dat$T2
#########################
######################## function to gather data in the required format for the figure making can handle multiple sites at once so when it comes to
####################### getting sites of the same land-use type you can just input that as a single vector
site <- sites1
View(data)
TPD_Diff_plot(data = PREDICTS_tpds, sites1 = primary_for, sites2 = plantation, T1lab = "Locomotion", T2lab = "Foraging",T3lab = "Body",
method = "percentile")
species_cells_frame <- data.frame(cells[,c(1:3)],potential_species = NA)
for(i in 1:nrow(species_cells_frame)){
print(i)
y <- cells[i,1]
x <- cells[i,2]
z <- cells[i,3]
for(j in 1:length(species_TPD)){
sp_dat <- species_TPD[[j]] %>% dplyr::filter(locomotion == x, foraging == y, body == z)
if(nrow(sp_dat) > 0) {
species_cells_frame[i,4] <- paste(species_cells_frame[i,4],names(species_TPD)[j])
}
}
}
View(species_cells_frame)
i <- 5
species_cells_frame[i,4]
species_cells_frame[i,4] <- gsub(pattern = "NA ", replacement = "", x = species_cells_frame[i,4])
View(species_cells_frame)
species_cells_frame <- data.frame(cells[,c(1:3)],potential_species = NA)
for(i in 1:nrow(species_cells_frame)){
print(i)
y <- cells[i,1]
x <- cells[i,2]
z <- cells[i,3]
for(j in 1:length(species_TPD)){
sp_dat <- species_TPD[[j]] %>% dplyr::filter(locomotion == x, foraging == y, body == z)
if(nrow(sp_dat) > 0) {
species_cells_frame[i,4] <- paste(species_cells_frame[i,4],names(species_TPD)[j], sep = "/")
}
}
species_cells_frame[i,4] <- gsub(pattern = "NA/", replacement = "", x = species_cells_frame[i,4])
}
View(species_cells_frame)
View(species_TPD)
TPD_Diff_plot(data = PREDICTS_tpds, sites1 = primary_for, sites2 = plantation, T1lab = "Locomotion", T2lab = "Foraging",T3lab = "Body",
method = "prob")
randomisations_TPD_morpho <- readRDS("~/OneDrive/Work/Biology/(2020-_Natural_History_Museum/PhD_Code/PREDICTS_Assembly/Outputs/randomisations_TPD_morpho.rds")
View(randomisations_TPD_morpho)
test <- list()
test$lala$hehe <- 35
View(test)
randomisations_TPD_morpho <- readRDS("~/OneDrive/Work/Biology/(2020-_Natural_History_Museum/PhD_Code/PREDICTS_Assembly/Outputs/randomisations_TPD_morpho.rds")
View(randomisations_TPD_morpho)
View(PREDICTS_tpds)
mean_TPDc_mat <- list()
rm(list = ls())
require(tidyverse)
require(TPD)
require(magrittr)
PREDICTS <- readRDS("Outputs/refined_predicts.rds")
TPD_traits <- readRDS("Outputs/full_morpho_traits_list.rds")
drop_spp <- readRDS("Outputs/assembly_drop_spp.rds")
for_traits <- readRDS("Outputs/predicts_foraging_pcoa.rds")
TPD_data <- data.frame(PREDICTS) %>% filter(!(Birdlife_Name %in% drop_spp)) %>%
dplyr::group_by(SSBS,Birdlife_Name) %>% dplyr::mutate(SpeciesSiteAbundance = sum(Effort_Corrected_Measurement), n_spp = n()) %>%
filter(!duplicated(n_spp) ) %>%
### calculating a hypervolume in 3 dimensions with fewer than 21 species on result in inaccurcies
group_by(SSBS) %>% dplyr::mutate(Site_spp = n_distinct(Birdlife_Name),TotalSiteAbundance = sum(SpeciesSiteAbundance)) %>%
ungroup() %>%
dplyr::mutate(RelativeAbundance = SpeciesSiteAbundance/TotalSiteAbundance) %>%
## how many studies have at least one site of primary minimal for comparisons to be made and make sure the sites have more than a single site.
droplevels() %>%
data.frame()
trait_range_calc <- function(range, traits){
n_range_2 <- dist(c(min(traits[,2]),max(traits[,2])))[1]
n_range_3 <- dist(c(min(traits[,3]),max(traits[,3])))[1]
n_range_4 <- dist(c(min(traits[,4]),max(traits[,4])))[1]
trait_ranges <- list(c(min(traits[,2]) -(range * n_range_2),max(traits[,2]) + (range * n_range_2)),
c(min(traits[,3]) -(range * n_range_3),max(traits[,3]) + (range * n_range_3)),
c(min(traits[,4]) -(range * n_range_4),max(traits[,4]) + (range * n_range_4)))
return(trait_ranges)
}
trait_ranges <- trait_range_calc(range = 0.15,traits = TPD_traits$complete_traits)
PRED_sites <- rep(list(NA),length(unique(TPD_data$SSBS)))
i <- 1
for(sit in as.character(unique(TPD_data$SSBS))){
comm_dat <- TPD_data %>% dplyr::filter(SSBS == sit) %>% dplyr::select(Birdlife_Name, RelativeAbundance)
PRED_sites[[i]] <- comm_dat
names(PRED_sites)[i] <- sit
i <- i +1
}
species_TPD <- function(species,method = c("bandwidth","sds")){
if(method == "sds"){
mtpd <- FALSE
if(any(species %in% c(TPD_traits$partial_traits$Birdlife_Name,TPD_traits$single_traits$Birdlife_Name))){
mtpd <- TRUE
Mean_sp <- species[which(species %in% c(TPD_traits$partial_traits$Birdlife_Name,TPD_traits$single_traits$Birdlife_Name))]
all_partial <- rbind(TPD_traits$partial_traits,TPD_traits$single_traits)
mean_TPD_dat <- all_partial %>% dplyr::filter(Birdlife_Name %in% Mean_sp) %>% data.frame()
mean_TPD <- TPDsMean(species = mean_TPD_dat[,1], means = mean_TPD_dat[,c(2,4,6)], sds = mean_TPD_dat[,c(3,5,7)], trait_ranges = trait_ranges)
}
comm_traits <- TPD_traits[["complete_traits"]] %>% dplyr::filter(Birdlife_Name %in% species)
trait_density <- TPDs(species = comm_traits[,1], traits = comm_traits[,c(2:4)], trait_ranges = trait_ranges)
if(mtpd){
trait_density$data$species <- c(trait_density$data$species,mean_TPD$data$species)
trait_density$TPDs <- c(trait_density$TPDs,mean_TPD$TPDs)
trait_density$data$traits <- rbind(trait_density$data$traits, mean_TPD$data$means)
}
}
if(method == "bandwidth"){
mean_TPD_dat <- TPD_traits$full_bandwidth_traits %>% dplyr::filter(Birdlife_Name %in% species) %>% data.frame()
trait_density <- TPDsMean(species = mean_TPD_dat[,1], means = mean_TPD_dat[,c(2,4,6)], sds = mean_TPD_dat[,c(3,5,7)], trait_ranges = trait_ranges)
}
return(trait_density)
}
##############################################################################
###########################################################################
site <- PRED_sites[[1]]
View(trait_ranges)
comm_sp <- site$Birdlife_Name
trait_density <- species_TPD(comm_sp, method = "bandwidth")
comm <- site %>% set_rownames(site$Birdlife_Name) %>% dplyr::select(RelativeAbundance)
Comm_tpd <- TPDc(TPDs = trait_density, sampUnit = t(comm))
Comm_tpd$TPDc <- Comm_tpd$TPDc$TPDc
View(Comm_tpd)
Comm_tpd <- Comm_tpd[["TPDc"]]
View(Comm_tpd)
comm_sp <- site$Birdlife_Name
trait_density <- species_TPD(comm_sp, method = "bandwidth")
comm <- site %>% set_rownames(site$Birdlife_Name) %>% dplyr::select(RelativeAbundance)
Comm_tpd <- TPDc(TPDs = trait_density, sampUnit = t(comm))
Comm_tpd$TPDc <- Comm_tpd$TPDc$TPDc
Comm_tpd <- Comm_tpd["TPDc"]
View(Comm_tpd)
comm_sp <- site$Birdlife_Name
trait_density <- species_TPD(comm_sp, method = "bandwidth")
comm <- site %>% set_rownames(site$Birdlife_Name) %>% dplyr::select(RelativeAbundance)
Comm_tpd <- TPDc(TPDs = trait_density, sampUnit = t(comm))
Comm_tpd$TPDc <- Comm_tpd$TPDc$TPDc
Comm_tpd <- Comm_tpd[-"data"]
Comm_tpd <- Comm_tpd[[-"data"]]
Comm_tpd$data <- NULL
View(Comm_tpd)
comm_sp <- site$Birdlife_Name
for_TPD_dat <- for_traits[["foraging_traits"]][["PCoA_Scores"]] %>% dplyr::filter(Birdlife_Name %in% comm_sp)
mean_TPD <- TPDsMean(species = for_TPD_dat[,1], means = for_TPD_dat[,c(2:4)], sds = matrix(rep(sds,nrow(site)), ncol = 3, byrow = TRUE),
trait_ranges = trait_ranges)
sds <- sqrt(diag(Hpi.diag(for_traits[["foraging_traits"]][["PCoA_Scores"]][,c(2:4)])))
trait_ranges <- trait_range_calc(range = 0.15, traits = for_traits[["foraging_traits"]][["PCoA_Scores"]])
comm_sp <- site$Birdlife_Name
for_TPD_dat <- for_traits[["foraging_traits"]][["PCoA_Scores"]] %>% dplyr::filter(Birdlife_Name %in% comm_sp)
mean_TPD <- TPDsMean(species = for_TPD_dat[,1], means = for_TPD_dat[,c(2:4)], sds = matrix(rep(sds,nrow(site)), ncol = 3, byrow = TRUE),
trait_ranges = trait_ranges)
comm <- site %>% set_rownames(site$Birdlife_Name) %>% dplyr::select(RelativeAbundance)
Comm_tpd <- TPDc(TPDs = mean_TPD, sampUnit = t(comm))
Comm_tpd$TPDc <- Comm_tpd$TPDc$TPDc
Comm_tpd$data <- NULL
all_sp <- unique(unlist(TPD_traits$full_bandwidth_traits$Birdlife_Name))
eval_grid <- species_TPD(all_sp, method = "sds")
eval_grid <- species_TPD(all_sp[1:10], method = "sds")
eval_grid <- eval_grid$data$evaluation_grid
View(eval_grid)
PREDICTS_tpds <- readRDS("Outputs/PREDICTS_sites_tpds.rds")
View(PREDICTS_tpds)
View(PREDICTS_tpds)
eval_grid <- species_TPD(all_sp[1:10], method = "sds")
PREDICTS_tpds$data$evaluation_grid <- eval_grid$data$evaluation_grid
View(PREDICTS_tpds)
View(for_traits)
trait_ranges <- trait_range_calc(range = 0.15, traits = for_traits[["foraging_traits"]][["PCoA_Scores"]])
eval_grid <- TPDsMean(species = for_traits[["foraging_traits"]][["PCoA_Scores"]][1:10,1],
means = for_traits[["foraging_traits"]][["PCoA_Scores"]][1:10,c(2:4)],
matrix(rep(sds,nrow(site)), ncol = 3, byrow = TRUE),
trait_ranges = trait_ranges)
For_PREDICTS_tpds <- readRDS("Outputs/PREDICTS_sites_for_tpds.rds")
For_PREDICTS_tpds$data$evaluation_grid <- eval_grid$data$evaluation_grid
i <- 1
for(i in 1:(length(For_PREDICTS_tpds)-1)){
For_PREDICTS_tpds[[i]]$data <- NULL
}
test <- For_PREDICTS_tpds[c(length(For_PREDICTS_tpds),1:(length(For_PREDICTS_tpds)-1))]
View(test)
trait_ranges <- trait_range_calc(range = 0.15,traits = TPD_traits$complete_traits)
View(PREDICTS_tpds)
for(i in 1:(length(PREDICTS_tpds)-1)){
PREDICTS_tpds[[i]]$data <- NULL
}
PREDICTS_tpds <- PREDICTS_tpds[c(length(PREDICTS_tpds),1:(length(PREDICTS_tpds)-1))]
View(PREDICTS_tpds)
write_rds(file = "Outputs/PREDICTS_sites_tpds.rds", x = PREDICTS_tpds)
write_rds(For_PREDICTS_tpds, file = "Outputs/PREDICTS_sites_for_tpds.rds")
rm(list = ls())
require(tidyverse)
require(TPD)
require(doParallel)
require(foreach)
TPD_randomisations_morpho <- read_rds("Outputs/randomisations_TPD_morpho.rds")
View(TPD_randomisations_morpho)
mean_TPD_randomisations_morpho <- rep(list(NA),length(TPD_randomisations_morpho))
randomisations <- readRDS("Outputs/site_randomisations.rds")
PREDICTS <- readRDS("Outputs/refined_predicts.rds")
TPD_traits <- readRDS("Outputs/full_morpho_traits_list.rds")
for_traits <- readRDS("Outputs/predicts_foraging_pcoa.rds")
PREDICTS_TPD <- readRDS("Outputs/PREDICTS_sites_tpds.rds")
randomisations <- randomisations[which(names(randomisations) %in% names(PREDICTS_TPD))]
trait_range_calc <- function(range, traits){
n_range_2 <- dist(c(min(traits[,2]),max(traits[,2])))[1]
n_range_3 <- dist(c(min(traits[,3]),max(traits[,3])))[1]
n_range_4 <- dist(c(min(traits[,4]),max(traits[,4])))[1]
#######################################
#####################################
trait_ranges <- list(c(min(traits[,2]) -(range * n_range_2),max(traits[,2]) + (range * n_range_2)),
c(min(traits[,3]) -(range * n_range_3),max(traits[,3]) + (range * n_range_3)),
c(min(traits[,4]) -(range * n_range_4),max(traits[,4]) + (range * n_range_4)))
return(trait_ranges)
}
trait_ranges <- trait_range_calc(range = 0.15, traits = TPD_traits$complete_traits)
eval_grid <- TPDs(TPD_traits$complete_traits[c(1:14),1], TPD_traits$complete_traits[c(1:14),c(2:4)], trait_ranges = trait_ranges)
mean_TPD_randomisations_morpho$data$evaluation_grid <- eval_grid$data$evaluation_grid
View(mean_TPD_randomisations_morpho)
mean_TPD_randomisations_morpho <- list()
mean_TPD_randomisations_morpho$data$evaluation_grid <- eval_grid$data$evaluation_grid
View(mean_TPD_randomisations_morpho)
mean_TPD_randomisations_morpho[[2]] <-  "lala"
View(mean_TPD_randomisations_morpho)
View(TPD_randomisations_morpho)
for(i in 2:length(TPD_randomisations_morpho)){
mean_TPD_randomisations_morpho[[i]]$RelativeAbundance <- TPD_randomisations_morpho[[i]]
}
View(mean_TPD_randomisations_morpho)
mean_TPD_randomisations_morpho <- list()
mean_TPD_randomisations_morpho$data$evaluation_grid <- eval_grid$data$evaluation_grid
for(i in 2:length(TPD_randomisations_morpho)){
mean_TPD_randomisations_morpho[[i]]$RelativeAbundance <- TPD_randomisations_morpho[[i]]
}
for(i in 2:length(TPD_randomisations_morpho)){
mean_TPD_randomisations_morpho[i]$RelativeAbundance <- TPD_randomisations_morpho[[i]]
}
View(mean_TPD_randomisations_morpho)
i <- 2
mean_TPD_randomisations_morpho[[i]] <- TPD_randomisations_morpho[[i]]
View(mean_TPD_randomisations_morpho)
mean_TPD_randomisations_morpho[[i]][["RelativeAbundance"]] <- TPD_randomisations_morpho[[i]]
PREDICTS_sites_tpds <- readRDS("~/OneDrive/Work/Biology/(2020-_Natural_History_Museum/PhD_Code/PREDICTS_Assembly/Outputs/PREDICTS_sites_tpds.rds")
View(PREDICTS_sites_tpds)
data <- list()
data$TPDc$RelativeAbundance <- TPD_randomisations_morpho[[i]]
View(data)
mean_TPD_randomisations_morpho[[i]] <- data
View(mean_TPD_randomisations_morpho)
for(i in 2:length(TPD_randomisations_morpho)){
data <- list()
data$TPDc$RelativeAbundance <- TPD_randomisations_morpho[[i]]
mean_TPD_randomisations_morpho[[i]] <- data
names(TPD_randomisations_morpho)[i] <- names(TPD_randomisations_morpho)[i]
}
View(mean_TPD_randomisations_morpho)
View(mean_TPD_randomisations_morpho)
for(i in 2:length(TPD_randomisations_morpho)){
data <- list()
data$TPDc$RelativeAbundance <- TPD_randomisations_morpho[[i]]
mean_TPD_randomisations_morpho[[i]] <- data
names(mean_TPD_randomisations_morpho)[i] <- names(TPD_randomisations_morpho)[i]
}
View(mean_TPD_randomisations_morpho)
write_rds(file = "Outputs/randomisations_TPD_morpho.rds", mean_TPD_randomisations_morpho)
rm(list = ls())
require(tidyverse)
require(TPD)
require(doParallel)
require(foreach)
randomisations <- readRDS("Outputs/site_randomisations.rds")
PREDICTS <- readRDS("Outputs/refined_predicts.rds")
TPD_traits <- readRDS("Outputs/full_morpho_traits_list.rds")
for_traits <- readRDS("Outputs/predicts_foraging_pcoa.rds")
PREDICTS_TPD <- readRDS("Outputs/PREDICTS_sites_tpds.rds")
randomisations_TPD_morpho <- readRDS("~/OneDrive/Work/Biology/(2020-_Natural_History_Museum/PhD_Code/PREDICTS_Assembly/Outputs/randomisations_TPD_morpho.rds")
View(randomisations_TPD_morpho)
randomisations_TPD_for <- readRDS("~/OneDrive/Work/Biology/(2020-_Natural_History_Museum/PhD_Code/PREDICTS_Assembly/Outputs/randomisations_TPD_for.rds")
View(randomisations_TPD_morpho)
View(randomisations_TPD_for)
test <- list()
require(tidyverse)
require(TPD)
require(doParallel)
require(foreach)
randomisations <- readRDS("Outputs/site_randomisations.rds")
PREDICTS <- readRDS("Outputs/refined_predicts.rds")
TPD_traits <- readRDS("Outputs/full_morpho_traits_list.rds")
for_traits <- readRDS("Outputs/predicts_foraging_pcoa.rds")
PREDICTS_TPD <- readRDS("Outputs/PREDICTS_sites_tpds.rds")
randomisations <- randomisations[which(names(randomisations) %in% names(PREDICTS_TPD))]
trait_range_calc <- function(range, traits){
n_range_2 <- dist(c(min(traits[,2]),max(traits[,2])))[1]
n_range_3 <- dist(c(min(traits[,3]),max(traits[,3])))[1]
n_range_4 <- dist(c(min(traits[,4]),max(traits[,4])))[1]
#######################################
#####################################
trait_ranges <- list(c(min(traits[,2]) -(range * n_range_2),max(traits[,2]) + (range * n_range_2)),
c(min(traits[,3]) -(range * n_range_3),max(traits[,3]) + (range * n_range_3)),
c(min(traits[,4]) -(range * n_range_4),max(traits[,4]) + (range * n_range_4)))
return(trait_ranges)
}
trait_ranges <- trait_range_calc(range = 0.15, traits = for_traits[["foraging_traits"]][["PCoA_Scores"]])
sds <- sqrt(diag(Hpi.diag(for_traits[["foraging_traits"]][["PCoA_Scores"]][,c(2:4)])))
eval_grid <- TPDsMean(species = for_traits[["foraging_traits"]][["PCoA_Scores"]][c(1:14),1],
means = for_traits[["foraging_traits"]][["PCoA_Scores"]][c(1:14),c(2:4)],
sds = matrix(rep(sds,14), ncol = 3, byrow = TRUE),
trait_ranges = trait_ranges)
test$data$evaluation_grid <- eval_grid$data$evaluation_grid
data <- list()
for(i in 2:length(randomisations_TPD_for)){
data <- list()
data$TPDc$RelativeAbundance  <- randomisations_TPD_for[[i]]
test[[i]] <- data
names(test)[i] <- names(randomisations_TPD_for)[i]
}
View(test)
write_rds(file = "Outputs/randomisations_TPD_for.rds", test)
